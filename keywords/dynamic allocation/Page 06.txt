We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy
Got it!
GeeksforGeeks
	

Login Courses Write an Article
Skip to content
 Algo ▼  DS ▼  Languages ▼  Interview ▼  Students ▼  GATE ▼  CS Subjects ▼  Quizzes ▼  GBlog Puzzles Practice
int (1 sign bit + 31 data bits) keyword in C
Program error signals
Why array index starts from zero ?
TCP Server-Client implementation in C
How to return multiple values from a function in C or C++?
Commonly Asked C Programming Interview Questions | Set 3
Applications of Pointers in C/C++
Pre-increment and Post-increment in C/C++
“static const” vs “#define” vs “enum”
Sum of array Elements without using loops and recursion
Why strcpy and strncpy are not safe to use?
How to find Segmentation Error in C & C++ ? (Using GDB)
Comments in C/C++
time() function in C
Loader in C/C++
GDB (Step by Step Introduction)
Communication between two process using signals in C
tolower() function in C
Passing Reference to a Pointer in C++
How to avoid Structure Padding in C?
Difference between const int*, const int * const, and int const *
How does a C program executes?
strrev() function in C
Difference between Call by Value and Call by Reference
Interesting facts about C Language
Difference between fundamental data types and derived data types
#pragma Directive in C/C++
Code Optimization Technique (logical AND and logical OR)
C++: Methods of code shortening in competitive programming

perm_identity
Dynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()
Since C is a structured language, it has some fixed rules for programming. One of it includes changing the size of an array. An array is collection of items stored at continuous memory locations.
arrays

As it can be seen that the length (size) of the array above made is 9. But what if there is a requirement to change this length (size). For Example, if there is situation where only 5 elements are needed to be entered in this array. In this case the remaining 4 indices are just wasting memory in this array. So there is a requirement to lessen the length (size) of the array from 9 to 5.



Take another situation. In this there is an array of 9 elements with all 9 indices filled. But there is a need to enter 3 more elements in this array. In this case 3 indices more are required. So the length (size) of the array needs to be changed from 9 to 12.

This procedure is referred as Dynamic Memory Allocation.

Therefore, Dynamic Memory Allocation can be defined as a procedure in which the size of a data structure (like Array) is changed during the runtime.



C provides some functions to achieve these tasks. There are 4 library functions provided by C defined under <stdlib.h> header file to facilitate dynamic memory allocation in C programming. They are:

malloc()
calloc()
free()
realloc()
Lets see each of them in detail.

malloc()
“malloc” or “memory allocation” method is used to dynamically allocate a single large block of memory with the specified size. It returns a pointer of type void which can be cast into a pointer of any form.

Syntax:

ptr = (cast-type*) malloc(byte-size)

For Example:
ptr = (int*) malloc(100 * sizeof(int));

Since the size of int is 4 bytes, 
this statement will allocate 400 bytes of memory. 
And, the pointer ptr holds the address 
of the first byte in the allocated memory.


If the space is insufficient, allocation fails and returns a NULL pointer.

Example:

filter_none
edit
play_arrow

brightness_4
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
  
    // This pointer will hold the 
    // base address of the block created 
    int* ptr; 
    int n, i, sum = 0; 
  
    // Get the number of elements for the array 
    n = 5; 
    printf("Enter number of elements: %d\n", n); 
  
    // Dynamically allocate memory using malloc() 
    ptr = (int*)malloc(n * sizeof(int)); 
  
    // Check if the memory has been successfully 
    // allocated by malloc or not 
    if (ptr == NULL) { 
        printf("Memory not allocated.\n"); 
        exit(0); 
    } 
    else { 
  
        // Memory has been successfully allocated 
        printf("Memory successfully allocated using malloc.\n"); 
  
        // Get the elements of the array 
        for (i = 0; i < n; ++i) { 
            ptr[i] = i + 1; 
        } 
  
        // Print the elements of the array 
        printf("The elements of the array are: "); 
        for (i = 0; i < n; ++i) { 
            printf("%d, ", ptr[i]); 
        } 
    } 
  
    return 0; 
} 
Output:

Enter number of elements: 5
Memory successfully allocated using malloc.
The elements of the array are: 1, 2, 3, 4, 5,
calloc()
“calloc” or “contiguous allocation” method is used to dynamically allocate the specified number of blocks of memory of the specified type. It initializes each block with a default value ‘0’.

Syntax:

ptr = (cast-type*)calloc(n, element-size);

For Example:
ptr = (float*) calloc(25, sizeof(float));

This statement allocates contiguous space in memory 
for 25 elements each with the size of float.


If the space is insufficient, allocation fails and returns a NULL pointer.

Example:

filter_none
edit
play_arrow

brightness_4
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
  
    // This pointer will hold the 
    // base address of the block created 
    int* ptr; 
    int n, i, sum = 0; 
  
    // Get the number of elements for the array 
    n = 5; 
    printf("Enter number of elements: %d\n", n); 
  
    // Dynamically allocate memory using calloc() 
    ptr = (int*)calloc(n, sizeof(int)); 
  
    // Check if the memory has been successfully 
    // allocated by malloc or not 
    if (ptr == NULL) { 
        printf("Memory not allocated.\n"); 
        exit(0); 
    } 
    else { 
  
        // Memory has been successfully allocated 
        printf("Memory successfully allocated using calloc.\n"); 
  
        // Get the elements of the array 
        for (i = 0; i < n; ++i) { 
            ptr[i] = i + 1; 
        } 
  
        // Print the elements of the array 
        printf("The elements of the array are: "); 
        for (i = 0; i < n; ++i) { 
            printf("%d, ", ptr[i]); 
        } 
    } 
  
    return 0; 
} 
Output:
Enter number of elements: 5
Memory successfully allocated using calloc.
The elements of the array are: 1, 2, 3, 4, 5,
free()
“free” method is used to dynamically de-allocate the memory. The memory allocated using functions malloc() and calloc() are not de-allocated on their own. Hence the free() method is used, whenever the dynamic memory allocation takes place. It helps to reduce wastage of memory by freeing it.

Syntax:



free(ptr);


Example:

filter_none
edit
play_arrow

brightness_4
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
  
    // This pointer will hold the 
    // base address of the block created 
    int *ptr, *ptr1; 
    int n, i, sum = 0; 
  
    // Get the number of elements for the array 
    n = 5; 
    printf("Enter number of elements: %d\n", n); 
  
    // Dynamically allocate memory using malloc() 
    ptr = (int*)malloc(n * sizeof(int)); 
  
    // Dynamically allocate memory using calloc() 
    ptr1 = (int*)calloc(n, sizeof(int)); 
  
    // Check if the memory has been successfully 
    // allocated by malloc or not 
    if (ptr == NULL || ptr1 == NULL) { 
        printf("Memory not allocated.\n"); 
        exit(0); 
    } 
    else { 
  
        // Memory has been successfully allocated 
        printf("Memory successfully allocated using malloc.\n"); 
  
        // Free the memory 
        free(ptr); 
        printf("Malloc Memory successfully freed.\n"); 
  
        // Memory has been successfully allocated 
        printf("\nMemory successfully allocated using calloc.\n"); 
  
        // Free the memory 
        free(ptr1); 
        printf("Calloc Memory successfully freed.\n"); 
    } 
  
    return 0; 
} 
Output:
Enter number of elements: 5
Memory successfully allocated using malloc.
Malloc Memory successfully freed.

Memory successfully allocated using calloc.
Calloc Memory successfully freed.
realloc()
“realloc” or “re-allocation” method is used to dynamically change the memory allocation of a previously allocated memory. In other words, if the memory previously allocated with the help of malloc or calloc is insufficient, realloc can be used to dynamically re-allocate memory.

Syntax:

ptr = realloc(ptr, newSize);

where ptr is reallocated with new size 'newSize'.


If the space is insufficient, allocation fails and returns a NULL pointer.

Example:

filter_none
edit
play_arrow

brightness_4
#include <stdio.h> 
#include <stdlib.h> 
  
int main() 
{ 
  
    // This pointer will hold the 
    // base address of the block created 
    int* ptr; 
    int n, i, sum = 0; 
  
    // Get the number of elements for the array 
    n = 5; 
    printf("Enter number of elements: %d\n", n); 
  
    // Dynamically allocate memory using calloc() 
    ptr = (int*)calloc(n, sizeof(int)); 
  
    // Check if the memory has been successfully 
    // allocated by malloc or not 
    if (ptr == NULL) { 
        printf("Memory not allocated.\n"); 
        exit(0); 
    } 
    else { 
  
        // Memory has been successfully allocated 
        printf("Memory successfully allocated using calloc.\n"); 
  
        // Get the elements of the array 
        for (i = 0; i < n; ++i) { 
            ptr[i] = i + 1; 
        } 
  
        // Print the elements of the array 
        printf("The elements of the array are: "); 
        for (i = 0; i < n; ++i) { 
            printf("%d, ", ptr[i]); 
        } 
  
        // Get the new size for the array 
        n = 10; 
        printf("\n\nEnter the new size of the array: %d\n", n); 
  
        // Dynamically re-allocate memory using realloc() 
        ptr = realloc(ptr, n * sizeof(int)); 
  
        // Memory has been successfully allocated 
        printf("Memory successfully re-allocated using realloc.\n"); 
  
        // Get the new elements of the array 
        for (i = 5; i < n; ++i) { 
            ptr[i] = i + 1; 
        } 
  
        // Print the elements of the array 
        printf("The elements of the array are: "); 
        for (i = 0; i < n; ++i) { 
            printf("%d, ", ptr[i]); 
        } 
  
        free(ptr); 
    } 
  
    return 0; 
} 
Output:
Enter number of elements: 5
Memory successfully allocated using calloc.
The elements of the array are: 1, 2, 3, 4, 5, 

Enter the new size of the array: 10
Memory successfully re-allocated using realloc.
The elements of the array are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,


Recommended Posts:
C | Dynamic Memory Allocation | Question 1
C | Dynamic Memory Allocation | Question 8
C | Dynamic Memory Allocation | Question 7
C | Dynamic Memory Allocation | Question 6
C | Dynamic Memory Allocation | Question 5
C | Dynamic Memory Allocation | Question 8
C | Dynamic Memory Allocation | Question 3
C | Dynamic Memory Allocation | Question 2
calloc() versus malloc()
MCQ on Memory allocation and compilation process
How to restrict dynamic allocation of objects in C++?
How to deallocate memory without using free() in C?
How does free() know the size of memory to be deallocated?
Use of realloc()
malloc() vs new

RishabhPrabhu
Technical Content Engineer
If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.

Please Improve this article if you find anything incorrect by clicking on the "Improve Article" button below.




Article Tags : CC BasicsDynamic Memory Allocation
Practice Tags : C

thumb_up
3
  
0 

No votes yet.
 FeedbackAdd NotesImprove Article  
Please write to us at contribute@geeksforgeeks.org to report any issue with the above content.
Post navigation
Previous
first_page Assignment Operators in C/C++
Next
last_pageBasic Input and Output in C




Writing code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here.


Load Comments
Share this post!

Most popular in C
Dividing a Large file into Separate Modules in C/C++, Java and Python
C program to store Student records as Structures and Sort them by Name
Difference between C and C++
Program to copy the contents of one array into another in the reverse order
strlen() function in c

More related articles in C
clock() function in C/C++
Measure execution time with high precision in C/C++
C program to find the length of a string
Program to Reverse a String using Pointers
Difference between Structure and Array in C


Most visited in C
Why does sizeof(x++) not increment x in C?
Is sizeof for a struct equal to the sum of sizeof of each member?
Program to check if two strings are same or not
Find the Nth term of the series 14, 28, 20, 40,.....
Different ways to Initialize all members of an array to the same value in C
How to modify a const variable in C?
Inline function in C
SQL using C/C++ and SQLite
C program to Find the Largest Number Among Three Numbers
Difference between C and Python
chdir() in C language with Examples
Difference between Java and C language
Different ways to initialize a variable in C/C++
Program to Find the Largest Number using Ternary Operator
getopt() function in C to parse command line arguments

 GeeksforGeeks
710-B, Advant Navis Business Park,
Sector-142, Noida, Uttar Pradesh - 201305
feedback@geeksforgeeks.org
COMPANY
About Us
Careers
Privacy Policy
Contact Us
LEARN
Algorithms
Data Structures
Languages
CS Subjects
Video Tutorials
PRACTICE
Company-wise
Topic-wise
Contests
Subjective Questions
CONTRIBUTE
Write an Article
Write Interview Experience
Internships
Videos
    
@geeksforgeeks, Some rights reserved